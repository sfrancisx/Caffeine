//  Copyright Yahoo! Inc. 2013-2014
#ifndef CAFFEINE_EXTENSIONJS_H
#define CAFFEINE_EXTENSIONJS_H
#pragma once

#include <string>

const std::string caffeine_extension =
    "var isCEF=1, Caffeine = Caffeine || {};"
    "Caffeine.CEFContext = {"

    "   HostPortMap: {},"
    
    "   getIP: function() {"
    "       native function getIP();"
    "       return getIP();"
    "   },"
    
    "   setCookie: function(name, value, callback) {"
    "       native function setCookie();"
    "       return setCookie(name, value, callback);"
    "   },"

    "   openFile: function(filePath) {"
    "      native function openFile();"
    "      return openFile(filePath);"
    "   },"
    
#if defined(OS_WIN)
    "   getLangCode: function() {"
    "      native function getLangCode();"
    "      return getLangCode();"
    "   },"
    "   setLangCode: function(langCode) {"
    "      native function setLangCode();"
    "      return setLangCode(langCode);"
    "   },"
    "   ChannelToGUIDMap: {"
    "      'Developer':'{A6A0F15A-817A-4342-9650-2436BC6B1732}',"
    "      'Nightly':'{FF81D7B2-1FBF-4095-9B03-F6CE4968DE04}',"
    "      'Dogfood':'{CDD89C5E-AE9B-46F7-82F8-E093E112240F}',"
    "      'Beta':'{9C4D9019-CF9E-43B9-A4FE-157D454AC23A}',"
    "      'Stable':'{8FCE1171-6945-4F19-B985-E3D44B3DA2D0}'"
    "   },"
    "   IdToCodeMap: {"
    "      11265: 'ar-JO',"
    "      2057: 'en-GB',"
    "      1033: 'en-US',"
    "      11274: 'es-AR',"
    "      1034: 'es-ES',"
    "      1036: 'fr-FR',"
    "      1057: 'id-ID',"
    "      1046: 'pt-BR',"
    "      1048: 'ro-RO',"
    "      1066: 'vi-VN',"
    "      1028: 'zh-hant-TW',"
    "      1049: 'ru-RU',"
    "      1030: 'da-DK',"
    "      1043: 'nl-NL',"
    "      1035: 'fi-FI',"
    "      3084: 'fr-CA',"
    "      1031: 'de-DE',"
    "      1032: 'el-GR',"
    "      1040: 'it-IT',"
    "      1042: 'ko-KR',"
    "      1044: 'nb-NO',"
    "      1045: 'pl-PL',"
    "      2070: 'pt-PT',"
    "      1053: 'sv-SE',"
    "      1054: 'th-TH',"
    "      1055: 'tr-TR',"
    "      2058: 'es-MX',"
    "      3076: 'zh-Hant-HK'"
    "   },"
    "   getInstallerStats: function() {"
    "      native function getInstallerStats();"
    "      return getInstallerStats();"
    "   },"
    "   getLocale: function() {"
    "      var langCode = Caffeine.CEFContext.getLangCode();"
    "      console.log('Installed Locale: ' + (Caffeine.CEFContext.IdToCodeMap[langCode] || 'en-US') );"
    "      return Caffeine.CEFContext.IdToCodeMap[langCode] || 'en-US';"
    "   },"
    "   restartApplication: function() {"
    "      native function restartApplication();"
    "      return restartApplication();"
    "   },"
    "   getLatestVersion: function() {"
    "      native function getLatestVersion();"
    "      var GUID = Caffeine.CEFContext.ChannelToGUIDMap[Caffeine.CEFContext.getUpdateChannel()];"
    "      return (GUID? getLatestVersion(GUID) : '1.0.0.0');"
    "   },"
    "   getWindowState: function() {"
    "      native function getWindowState();"
    "      return getWindowState();"
    "   },"
    "   getDownloadPath: function(callback) {"
    "      native function getDownloadPath();"
    "      return getDownloadPath(callback);"
    "   },"
#else
    "   getLocale: function() {"
    "      native function getLocale();"
    "      return getLocale();"
    "   },"
#endif
    "   hasFocus: function() {"
    "       native function hasFocus();"
    "       return hasFocus();"
    "   },"

    "   popupWindow: function(parms, create_frameless, height, width, left, top, target, resizable, minWidth, minHeight) {"
    "      native function popupWindow();"
    "      return popupWindow(parms, create_frameless, height, width, left, top, target, resizable, minWidth, minHeight);"
    "   },"

    "   toastWindow: function(parms, target) {"
    "      native function toastWindow();"
    "      return toastWindow(parms, target);"
    "   },"

    // TODO - not sure about the functionality for this function - see if we can remove this
    "   getWindow: function(value) {"
    "      native function getWindow();"
    "      return getWindow(value);"
    "   },"
    
    "   sendIPC: function(target, payload, from) {"
    "      native function sendIPC();"
    "      return sendIPC(target, payload, from);"
    "   },"
    
    "   startFlashing: function(target, bAutoStop) {"
    "      native function startFlashing();"
    "      return startFlashing(target, bAutoStop);"
    "   },"
    
    "   stopFlashing: function(target) {"
    "      native function stopFlashing();"
    "      return stopFlashing(target);"
    "   },"
    
    "   activateWindow: function(target) {"
    "      native function activateWindow();"
    "      return activateWindow(target);"
    "   },"
    
    "   activateApp: function() {"
    "      native function activateApp();"
    "      return activateApp();"
    "   },"
    
    "   showWindow: function(uuid) {"
    "      native function showWindow();"
    "      return showWindow(uuid);"
    "   },"
    
    "   hideWindow: function(IPC_id) {"
    "      native function hideWindow();"
    "      return hideWindow(IPC_id);"
    "   },"
  
    "   getZippedLogFiles: function() {"
    "       native function getZippedLogFiles();"
    "       return getZippedLogFiles();"
    "   },"

    "   getUpdaterVersion: function() {"
    "      native function getUpdaterVersion();"
    "      return getUpdaterVersion();"
    "   },"

#if defined(OS_WIN)
    "   getChannelGUIDs: function() {"
    "      native function getChannelGUIDs();"
    "      return getChannelGUIDs();"
    "   },"
    "   getUpdateChannel: function() {"
    "      var i, j,"
    "          GUIDOrder = ['Developer', 'Nightly', 'Dogfood', 'Beta', 'Stable'],"
    "          AllGUIDs = Caffeine.CEFContext.getChannelGUIDs(),"
    "          retval = 'None';"
    "      searchLoop:"
    "      for(i=0; i<GUIDOrder.length; ++i) {"
    "         for(j=0; j<AllGUIDs.length; ++j) {"
    "            if (Caffeine.CEFContext.ChannelToGUIDMap[GUIDOrder[i]] == AllGUIDs[j]) {"
    "               retval = GUIDOrder[i];"
    "               break searchLoop;"
    "            }"
    "         }"
    "      }"
    "      return retval;"
    "   },"
    //  TODO:  Add a callback
    "   uploadCrashLogs: function(userDescription) {"
    "      native function uploadCrashLogs();"
    "      return uploadCrashLogs((Caffeine.Version && Caffeine.Version.appVersion)||'999', userDescription);"
    "   },"
#else
    "   getUpdateChannel: function() {"
    "       native function getUpdateChannel();"
    "       return getUpdateChannel();"
    "   },"
#endif
    "   getCrashLogCount: function() {"
    "      native function getCrashLogCount();"
    "      return getCrashLogCount();"
    "   },"
    "   deleteCrashLogs: function() {"
    "      native function deleteCrashLogs();"
    "      return deleteCrashLogs();"
    "   },"
    "   triggerDump: function(callback) {"
    "      native function triggerDump();"
    "      return triggerDump(callback);"
    "   },"
    "   showViewMenu: function(showOrHide) {"
    "       native function showViewMenu();"
    "       return showViewMenu(showOrHide);"
    "   },"
    
    "   setBadgeCount: function(badgeCount, bRequest) {"
    "       native function setBadgeCount();"
    "       return setBadgeCount(badgeCount, bRequest);"
    "   },"
    
    "   getIPbyName: function(hostName) {"
    "       native function getIPbyName();"
    "       return getIPbyName(hostName);"
    "   },"
    
    // There is at least 1 session connected (enables LOGOUT menu, etc)
    "   stateIsNowLoggedIn: function(true_or_false) {"
    "      native function stateIsNowLoggedIn();"
    "      return stateIsNowLoggedIn(true_or_false);"
    "   },"

    // Stats is unavailable (MPOP dormant, network not available, etc
    "   enableSessionMenus: function(true_or_false) {"
    "      native function enableSessionMenus();"
    "      return enableSessionMenus(true_or_false);"
    "   },"
    
    "   shellSetsLocation: function() {"
    "       native function shellSetsLocation();"
    "       return shellSetsLocation();"
    "   },"

    "   shakeWindow: function() {"
    "      native function shakeWindow();"
    "      return shakeWindow();"
    "   },"

    // XXX where if height and width  equal to 0 then they are ignored
    "   moveWindowTo: function(left,top,height,width) {"
    "      native function moveWindowTo();"
    "      return moveWindowTo(left,top,height,width);"
    "   },"
    
    "   setUserAgent: function(useragent) {"
    "      native function setUserAgent();"
    "      return setUserAgent(useragent);"
    "   },"

    "   setPrefixMapping: function(oldPrefix, newPrefix) {"
    "      native function setPrefixMapping();"
    "      return setPrefixMapping(oldPrefix, newPrefix);"
    "   },"
    
    "   messageReceived: function(from, display, msg, convId) {"
    "      native function messageReceived();"
    "      return messageReceived(from, display, msg, convId);"
    "   },"
    
    "   showFileSaveAsDialog: function(show) {"
    "      native function showFileSaveAsDialog();"
    "      return showFileSaveAsDialog(show);"
    "   },"

    "   setDownloadPath: function(path, callback) {"
    "      native function setDownloadPath();"
    "      return setDownloadPath(path, callback);"
    "   },"

    "   getDownloadDirectoryFromUser: function(callback) {"
    "      native function getDownloadDirectoryFromUser();"
    "      return getDownloadDirectoryFromUser(callback);"
    "   },"
    "   getDownloadPathFromUser: function(suggestedFilename, callback) {"
    "      native function getDownloadPathFromUser();"
    "      return getDownloadPathFromUser(suggestedFilename, callback);"
    "   },"
    "   resetDownloadDirectory: function(callback) {"
    "      native function resetDownloadDirectory();"
    "      return resetDownloadDirectory(callback);"
    "   },"
    "   showDirectory: function(directoryPath, selectedFile) {"
    "      native function showDirectory();"
    "      return showDirectory(directoryPath, selectedFile);"
    "   },"
        
    "   setBrowserValue: function(value_id, value) {"
    "      native function setBrowserValue();"
    "      return setBrowserValue(value_id, value);"
    "   },"
    
    "   encrypt: function(plaintext) {"
    "      native function encrypt();"
    "      return encrypt(plaintext);"
    "   },"
    "   decrypt: function(blob) {"
    "      native function decrypt();"
    "      return decrypt(blob);"
    "   },"
    
    "   setPersistentValue: function(key, value) {"
    "      native function setPersistentValue();"
    "      return setPersistentValue(key, ''+value);"
    "   },"
    "   getPersistentValue: function(key) {"
    "      native function getPersistentValue();"
    "      return getPersistentValue(key);"
    "   },"
    "   removePersistentValue: function(key) {"
    "      native function removePersistentValue();"
    "      return removePersistentValue(key);"
    "   },"
    //  Returns an object with all key/value pairs
    "   getAllPersistentValues: function() {"
    "      native function getAllPersistentValues();"
    "      return getAllPersistentValues();"
    "   },"

#if defined(OS_WIN)

    "   setUserToken: function(user, token) {"
    "      native function setPersistentValue();"
    "      return setPersistentValue('credStore.'+user, Caffeine.CEFContext.encrypt(''+token));"
    "   },"
    "   getUserToken: function(user) {"
    "      native function getPersistentValue();"
    "      var retval = getPersistentValue('credStore.'+user);"
    "      return (retval && Caffeine.CEFContext.decrypt(retval));"
    "   },"
    "   removeUserToken: function(user) {"
    "      native function removePersistentValue();"
    "      removePersistentValue('credStore.'+user);"
    "   },"
    "   removeAllUserTokens: function() {"
    "      var o = Caffeine.CEFContext.getAllPersistentValues(), k;"
    "      for(k in o) {"
    "         if (k.search('credStore.')==0) {"
    "            Caffeine.CEFContext.removePersistentValue(k);"
    "         }"
    "      }"
    "   },"
    "   setEphemeralState: function(obj) {"
    "      native function setEphemeralState();"
    "      setEphemeralState( Caffeine.CEFContext.encrypt(JSON.stringify(obj)));"
    "   },"
    "   getEphemeralState: function() {"
    "      native function getEphemeralState();"
    "      return JSON.parse(getEphemeralState());"
    "   },"
#else
    "   setUserToken: function(user, token) {"
    "      native function setUserToken();"
    "      return setUserToken(user, token);"
    "    },"
    
    "   getUserToken: function(user) {"
    "      native function getUserToken();"
    "      return getUserToken(user);"
    "   },"
    
    "   removeUserToken: function(user) {"
    "      native function removeUserToken();"
    "      return removeUserToken(user);"
    "   },"

    "   removeAllUserTokens: function() {"
    "      native function removeAllUserTokens();"
    "      return removeAllUserTokens();"
    "   },"
#endif    


#ifdef __APPLE__
"   createSocket: function(parms, connectCallback) {"
"      native function createSocket();"
"      return createSocket(parms.host, +parms.port, !!parms.isSecure, parms.readHandler, parms.errorHandler, parms.closeHandler, connectCallback);"
"   },"

"   writeSocket: function(parms, writeCallback) {"
"      native function writeSocket();"
"      return writeSocket(parms.handle, parms.data, writeCallback);"
"   },"

"   closeSocket: function(handle) {"
"      native function closeSocket();"
"      return closeSocket(handle);"
"   },"

#else
    // sockets for RTT2
    // Create Socket
    "   createSocket: function(parms, connectCallback) {"
    "      native function createSocket();"
    "      if(!(parms.host && parms.port && parms.readHandler && parms.errorHandler && parms.closeHandler)) {"
    "         throw 'createSocket:  Missing parameters.';"
    "      }"
//    "      parms.host = Caffeine.CEFContext.getIPbyName(parms.host);"
    
    "      function newConnectCallback(error, data) {"
    "         if (!error) {"
    "            data.host = parms.host;  data.port = parms.port;"
    "            Caffeine.CEFContext.HostPortMap[data.handle] = data.host + ':' + data.port;"
    "         }"
    "         connectCallback(error, data);"
    "      }"
    "      function newErrorCallback(data) {"
    "         delete Caffeine.CEFContext.HostPortMap[data.handle];"
    "         parms.errorHandler(data);"
    "      }"
    "      function newCloseCallback(data) {"
    "         if ((data.handle in Caffeine.CEFContext.HostPortMap)) {"
    "            delete Caffeine.CEFContext.HostPortMap[data.handle]; "
    "         }"
    "         parms.closeHandler(data);"
    "      }"

    "      var socket = Caffeine.CEFContext.isHostPortOpen(parms.host + ':' + parms.port);"
    "      if (socket) {"
    "      console.log('V8 createSocket reusing socket '+handle);"
    "         connectCallback(null, {status: 'success', host: parms.host, port: +parms.port, handle: +socket});"
    "      } else {"
    "         createSocket(parms.host, +parms.port, !!parms.isSecure, parms.readHandler, newErrorCallback, newCloseCallback, newConnectCallback);"
    "      }"
    "   },"
    
    //  We're going to have to do this test in the C++ code anyways.  So, do we need it?
    "   isHostPortOpen: function(hostportToTest) {"
    "      var matchingSocket = null;"
    "      for (var s in Caffeine.CEFContext.HostPortMap) {"
    "         if(hostportToTest == Caffeine.CEFContext.HostPortMap[s]) {"
    "            matchingSocket = s;"
    "            break;"
    "         }"
    "      }"
    "      return matchingSocket;"
    "   },"
    
    "   writeSocket: function(parms, writeCallback) {"
    "      native function writeSocket();"
    "      if (!(parms.handle in Caffeine.CEFContext.HostPortMap)) {"
    "         console.log('V8 writeSocket for '+parms.handle);"
    "         throw 'writeSocket: invalid handle';"
    "      }"
    "      return writeSocket(parms.handle, parms.data, writeCallback);"
    "   },"
    
// TODO
    "   closeSocket: function(handle) {"
    "      native function closeSocket();"
    "      console.log('V8 closeSocket for '+handle);"
    "      if (!(handle in Caffeine.CEFContext.HostPortMap)) {"
    "         throw 'closeSocket: invalid handle';"
    "      }"
    "      delete Caffeine.CEFContext.HostPortMap[handle]; "
    "      return closeSocket(handle);"
    "   },"
#endif


    "   getUTF8Size: function(string) {"
    "      native function getUTF8Size();"
    "      return getUTF8Size(string);"
    "   },"
    
    "   isInternalIP: function() {"
    "      native function isInternalIP();"
    "      return isInternalIP();"
#ifdef ENABLE_MUSIC_SHARE
	"   },"
    // iTunes integration messages
    "   isITunesOn: function(callback) {"
    "      native function isITunesOn();"
    "      return isITunesOn(callback);"
    "   },"
    "   ITunesPlayPreview: function(previewURL) {"
    "      native function ITunesPlayPreview();"
    "      return ITunesPlayPreview(previewURL);"
    "   },"
    "   getITunesTrackInfo: function(callback) {"
    "      native function getITunesTrackInfo();"
    "      return getITunesTrackInfo(callback);"
    "   },"
	"   getInstalledPlayers: function(callback) {"
    "      native function getInstalledPlayers();"
    "      return getInstalledPlayers(callback);"
#endif
	"   }"
    "};"
	"Caffeine.Performance = {"
	"	webkitInitialized: new Date()"
    "}";

#endif  //  CAFFEINE_EXTENSIONJS_H



